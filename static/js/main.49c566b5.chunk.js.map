{"version":3,"sources":["components/Card/Card.js","components/ButtonGroup/ButtonGroup.js","hoc/Modal/Modal.js","containers/MovieListContainer/MovieListContainer.js","App.js","serviceWorker.js","index.js"],"names":["Card","className","src","alt","srcset","ButtonGroup","toggleModal","class","onClick","Modal","props","showModal","e","stopPropagation","MovieListContainer","state","movies","setState","prevState","this","map","movie","i","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mWAoBeA,G,YAjBF,WACX,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,0BACb,sCAEF,yBAAKA,UAAU,uBACb,yBAAKC,IAAI,uCAAuCC,IAAI,GAAGC,OAAO,MAEhE,yBAAKH,UAAU,wBACb,4CACA,+CCIOI,G,MAfK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrB,OACE,yBAAKL,UAAU,gBACb,+BAEA,4BAAQA,UAAU,uBAChB,uBAAGM,MAAM,kBAAT,SAEF,4BAAQN,UAAU,qBAAqBO,QAAS,kBAAMF,MACpD,uBAAGC,MAAM,kBAAT,eC6BOE,G,MAvCD,SAAAC,GACZ,OACE,kBAAC,WAAD,KACGA,EAAMC,UACL,yBACEV,UAAU,kBACVO,QAAS,SAAAI,GACPF,EAAMJ,gBAGR,yBAAKL,UAAU,QAAQO,QAAS,SAAAI,GAAC,OAAIA,EAAEC,oBACpC,IAED,yBAAKZ,UAAU,kBACb,6CAEF,yBAAKA,UAAU,kBACb,4BAAQO,QAAS,kBAAME,EAAMJ,gBAA7B,UACA,4BAAQE,QAAS,kBAAME,EAAMJ,gBAA7B,aACA,4BAAQE,QAAS,kBAAME,EAAMJ,gBAA7B,UACA,4BAAQE,QAAS,kBAAME,EAAMJ,gBAA7B,SACA,4BAAQE,QAAS,kBAAME,EAAMJ,gBAA7B,SACA,4BAAQE,QAAS,kBAAME,EAAMJ,gBAA7B,WACA,4BAAQE,QAAS,kBAAME,EAAMJ,gBAA7B,UACA,4BAAQE,QAAS,kBAAME,EAAMJ,gBAA7B,WACA,4BAAQE,QAAS,kBAAME,EAAMJ,gBAA7B,WACA,4BAAQE,QAAS,kBAAME,EAAMJ,gBAA7B,mBAGA,4BAAQE,QAAS,kBAAME,EAAMJ,gBAA7B,YACA,4BAAQE,QAAS,kBAAME,EAAMJ,gBAA7B,cAIJ,QCGKQ,E,2MAhCbC,MAAQ,CACNC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACpCL,WAAW,G,EAGbL,YAAc,WACZ,EAAKW,UAAS,SAAAC,GACZ,MAAO,CACLP,WAAYO,EAAUP,e,wEAK1B,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CACEA,UAAWQ,KAAKJ,MAAMJ,UACtBL,YAAaa,KAAKb,cAEpB,yBAAKL,UAAU,cACZkB,KAAKJ,MAAMC,OAAOI,KAAI,SAACC,EAAOC,GAC7B,OAAO,kBAAC,EAAD,UAGX,yBAAKrB,UAAU,qBACb,kBAAC,EAAD,CAAaK,YAAaa,KAAKb,oB,GA1BRiB,aCGlBC,MAJf,WACE,OAAO,kBAAC,EAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.49c566b5.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport './Card.scss'\r\n\r\nconst Card = () => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <div className=\"card-container__rating\">\r\n        <span>8.2</span>\r\n      </div>\r\n      <div className=\"card-container__img\">\r\n        <img src=\"https://picsum.photos/id/237/500/400\" alt=\"\" srcset=\"\" />\r\n      </div>\r\n      <div className=\"card-container__text\">\r\n        <h1>Crawl (2019)</h1>\r\n        <p>Language: en</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card\r\n","import React from \"react\";\r\nimport \"./ButtonGroup.scss\";\r\n\r\nconst ButtonGroup = ({ toggleModal }) => {\r\n  return (\r\n    <div className=\"button-group\">\r\n      <span></span>\r\n\r\n      <button className=\"button-group--modal\">\r\n        <i class=\"material-icons\">face</i>\r\n      </button>\r\n      <button className=\"button-group--load\" onClick={() => toggleModal()}>\r\n        <i class=\"material-icons\">shuffle</i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonGroup;\r\n","import React, { Fragment } from \"react\";\r\nimport \"./Modal.scss\";\r\nconst Modal = props => {\r\n  return (\r\n    <Fragment>\r\n      {props.showModal ? (\r\n        <div\r\n          className=\"modal-container\"\r\n          onClick={e => {\r\n            props.toggleModal();\r\n          }}\r\n        >\r\n          <div className=\"modal\" onClick={e => e.stopPropagation()}>\r\n            {\" \"}\r\n            {/* Prevents the toggleModal from being triggered*/}\r\n            <div className=\"modal__heading\">\r\n              <h1>Select Genre</h1>\r\n            </div>\r\n            <div className=\"modal__buttons\">\r\n              <button onClick={() => props.toggleModal()}>Action</button>\r\n              <button onClick={() => props.toggleModal()}>Adventure</button>\r\n              <button onClick={() => props.toggleModal()}>Comedy</button>\r\n              <button onClick={() => props.toggleModal()}>Crime</button>\r\n              <button onClick={() => props.toggleModal()}>Drama</button>\r\n              <button onClick={() => props.toggleModal()}>Fantasy</button>\r\n              <button onClick={() => props.toggleModal()}>Horror</button>\r\n              <button onClick={() => props.toggleModal()}>Mystery</button>\r\n              <button onClick={() => props.toggleModal()}>Romance</button>\r\n              <button onClick={() => props.toggleModal()}>\r\n                Science Fiction\r\n              </button>\r\n              <button onClick={() => props.toggleModal()}>Thriller</button>\r\n              <button onClick={() => props.toggleModal()}>Western</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport \"./MovieListContainer.scss\";\r\nimport Card from \"../../components/Card/Card\";\r\nimport ButtonGroup from \"../../components/ButtonGroup/ButtonGroup\";\r\nimport Modal from \"../../hoc/Modal/Modal\";\r\n\r\nclass MovieListContainer extends Component {\r\n  state = {\r\n    movies: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    showModal: false\r\n  };\r\n\r\n  toggleModal = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        showModal: !prevState.showModal\r\n      };\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Modal\r\n          showModal={this.state.showModal}\r\n          toggleModal={this.toggleModal}\r\n        />\r\n        <div className=\"movie-list\">\r\n          {this.state.movies.map((movie, i) => {\r\n            return <Card />;\r\n          })}\r\n        </div>\r\n        <div className=\"buttons-container\">\r\n          <ButtonGroup toggleModal={this.toggleModal} />\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieListContainer;\r\n","import React from \"react\";\r\n\r\nimport \"./App.scss\";\r\nimport MovieListContainer from \"./containers/MovieListContainer/MovieListContainer\";\r\n\r\nfunction App() {\r\n  return <MovieListContainer />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}